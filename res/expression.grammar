@m {
#import <TDTemplateEngine/XPBooleanValue.h>
#import <TDTemplateEngine/XPNumericValue.h>
#import <TDTemplateEngine/XPStringValue.h>
}

@extension {
@property (nonatomic, retain) PKToken *openParen;
}

@init {
    self.openParen = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"(" doubleValue:0.0];
}

@dealloc {
    self.openParen = nil;
}

@before {
    PKTokenizer *t = self.tokenizer;
    [t.symbolState add:@"=="];
    [t.symbolState add:@"!="];
    [t.symbolState add:@"<="];
    [t.symbolState add:@">="];
}

expr    = orExpr;

orOp 	@after { PUSH(@(XP_TOKEN_KIND_OR)); }
		=  'or'! | '||'!;
orExpr  = andExpr (orOp andExpr)*;

andOp 	@after { PUSH(@(XP_TOKEN_KIND_AND)); }
		= 'and'! | '&&'!;
andExpr = equalityExpr (andOp equalityExpr)*;

eqOp 	@after { PUSH(@(XP_TOKEN_KIND_EQ)); }
		=  '='! | '=='! | 'eq'!;
neOp 	@after { PUSH(@(XP_TOKEN_KIND_NE)); }
		= '!='! | '!='! | 'ne'!;
equalityExpr = relationalExpr ((eqOp | neOp) relationalExpr {
	XPValue *rhs = POP();
	NSInteger op = POP_INT();
	XPValue *lhs = POP();
	BOOL res = [lhs compareToValue:rhs usingOperator:op];
    PUSH([XPBooleanValue booleanValueWithBoolean:res]);
})*;

ltOp 	@after { PUSH(@(XP_TOKEN_KIND_LT)); }
		=  '<'! | 'lt'!;
gtOp 	@after { PUSH(@(XP_TOKEN_KIND_GT)); }
		=  '>'! | 'gt'!;
leOp 	@after { PUSH(@(XP_TOKEN_KIND_LE)); }
		= '<='! | 'le'!;
geOp 	@after { PUSH(@(XP_TOKEN_KIND_GE)); }
		= '>='! | 'ge'!;
relationalExpr = additiveExpr ((ltOp | gtOp | leOp | geOp) additiveExpr {
	XPValue *rhs = POP();
	NSInteger op = POP_INT();
	XPValue *lhs = POP();
	BOOL res = [lhs compareToValue:rhs usingOperator:op];
    PUSH([XPBooleanValue booleanValueWithBoolean:res]);
})*;

additiveExpr = multiplicativeExpr (('+' | '-') multiplicativeExpr)*;
multiplicativeExpr = unaryExpr (('*' | '/' | '%') unaryExpr)*;
unaryExpr = '-'* primary;
primary = atom | subExpr;

subExpr
    = '(' expr ')'! {
    NSArray *objs = ABOVE(_openParen);
    POP(); // discard `(`
    for (id obj in [objs reverseObjectEnumerator]) {
        PUSH(obj);
    \}
};

atom    = literal;
literal = str | num | bool;
bool
    = true { PUSH([XPBooleanValue booleanValueWithBoolean:YES]); }
    | false { PUSH([XPBooleanValue booleanValueWithBoolean:NO]); }
    ;

true = 'true'! | 'YES'!;
false = 'false'! | 'NO'!;

num = Number {
    PUSH([XPNumericValue numericValueWithNumber:POP_DOUBLE()]);
};

str = QuotedString {
    PUSH([XPStringValue stringValueWithString:POP_QUOTED_STR()]);
};