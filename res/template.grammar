@h {
@class TDTemplateContext;
}

@interface {
@property (nonatomic, retain) TDTemplateContext *staticContext;
}

@m {
#import <TDTemplateEngine/TDTemplateContext.h>
#import "TDRootNode.h"
#import "TDVariableNode.h"
#import "TDBlockStartNode.h"
#import "TDBlockEndNode.h"
#import "TDTextNode.h"
}

@extension {
@property (nonatomic, retain) TDNode *currentParent;
}

@dealloc {
	self.staticContext = nil;
    self.currentParent = nil;
}

template
@before {
	TDAssert(_staticContext);
    TDNode *root = [TDRootNode rootNodeWithStaticContext:_staticContext];
	self.assembly.target = root;
    self.currentParent = root;
}
	= content+
	;
	
content
	= var
	| empty_tag
	| block 
	| text
	;

var 
	= 'var' {
	PKToken *tok = POP();
	TDNode *varNode = [TDVariableNode nodeWithToken:tok parent:_currentParent];
	[_currentParent addChild:varNode];
};

empty_tag
	= 'empty_tag' {
	PKToken *tok = POP();
	TDNode *startTagNode = [TDBlockStartNode nodeWithToken:tok parent:_currentParent];
	[_currentParent addChild:startTagNode];
	//self.currentParent = startTagNode;
};

block 
@before { PUSH(_currentParent); }
@after { self.currentParent = POP(); }
	= block_start_tag block_body block_end_tag
	;

block_start_tag 
	= 'block_start_tag' {
	PKToken *tok = POP();
	TDNode *startTagNode = [TDBlockStartNode nodeWithToken:tok parent:_currentParent];
	[_currentParent addChild:startTagNode];
	self.currentParent = startTagNode;
};

block_end_tag
	= 'block_end_tag' {
    PKToken *tok = POP();
    ASSERT([_currentParent.name hasPrefix:[tok.stringValue substringFromIndex:3]]);
};

block_body 
	= content+
	;

text 
	= 'text' {
	PKToken *tok = POP();
	TDNode *txtNode = [TDTextNode nodeWithToken:tok parent:_currentParent];
	[_currentParent addChild:txtNode];
};
