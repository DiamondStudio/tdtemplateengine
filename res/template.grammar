@h {
@class TDTemplateContext;
}

@interface {
@property (nonatomic, retain) TDTemplateContext *staticContext;
}

@m {
#import <TDTemplateEngine/TDTemplateEngine.h>
#import <TDTemplateEngine/TDTemplateContext.h>
#import "TDRootNode.h"
#import "TDVariableNode.h"
#import "TDBlockStartNode.h"
#import "TDBlockEndNode.h"
#import "TDTextNode.h"
}

@extension {
@property (nonatomic, assign) TDNode *currentParent; // weakref
}

@dealloc {
    self.staticContext = nil;
    self.currentParent = nil;
}

template
@before {
    TDAssert(_staticContext);
    TDNode *root = [TDRootNode rootNodeWithStaticContext:_staticContext];
    self.assembly.target = root;
    self.currentParent = root;
}
    = content+
    ;
    
content
    = var
    | empty_tag
    | block_tag 
    | text
    ;

body_content
    = var
    | empty_tag
    | helper_tag
    | block_tag 
    | text
    ;

var 
    = 'var' {
    PKToken *tok = POP();
    TDNode *varNode = [TDVariableNode nodeWithToken:tok parent:_currentParent];
    [_currentParent addChild:varNode];
};

empty_tag
    = 'empty_tag' {
    PKToken *tok = POP();
    TDNode *startTagNode = [TDBlockStartNode nodeWithToken:tok parent:_currentParent];
    [_currentParent addChild:startTagNode];
    //self.currentParent = startTagNode;
};

helper_tag
    = helper_start_tag content*;

helper_start_tag
    = 'helper_start_tag' {
    PKToken *tok = POP();
    TDNode *startTagNode = [TDBlockStartNode nodeWithToken:tok parent:_currentParent];
    [_currentParent addChild:startTagNode];
    PUSH(_currentParent);
    self.currentParent = startTagNode;
};

block_tag
@before { PUSH(_currentParent); }
@after { self.currentParent = POP(); }
    = block_start_tag body_content* block_end_tag 
    ;

block_start_tag 
    = 'block_start_tag' {
    PKToken *tok = POP();
    TDNode *startTagNode = [TDBlockStartNode nodeWithToken:tok parent:_currentParent];
    [_currentParent addChild:startTagNode];
    self.currentParent = startTagNode;
};

block_end_tag
    = 'block_end_tag' {
    PKToken *tok = POP();
    NSString *tagName = [tok.stringValue substringFromIndex:[TD_END_TAG_PREFIX length]];
    while (![_currentParent.name hasPrefix:tagName])
        self.currentParent = POP();

    ASSERT([_currentParent.name hasPrefix:tagName]);
    TDNode *endTagNode = [TDBlockEndNode nodeWithToken:tok parent:_currentParent.parent];
    [_currentParent.parent addChild:endTagNode];
};

text 
    = 'text' {
    PKToken *tok = POP();
    TDNode *txtNode = [TDTextNode nodeWithToken:tok parent:_currentParent];
    [_currentParent addChild:txtNode];
};
